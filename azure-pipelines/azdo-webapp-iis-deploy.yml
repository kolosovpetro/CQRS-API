trigger:
  batch: true
  branches:
    include:
      - develop
      - master
  paths:
    include:
      - '*'

pr:
  branches:
    include:
      - develop
      - master

variables:
  - name: solution
    value: 'MoviesAPI.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'
  - name: projectPath
    value: 'MoviesAPI.Core/MoviesAPI.Core.csproj'

stages:
  - stage: 'Build_Test'
    jobs:
      - job: "Build"
        displayName: 'Build Test & Drop artifacts'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 0

          - task: gitversion/setup@0
            displayName: 'GitVersion Setup'
            inputs:
              versionSpec: '5.9.x'

          - task: gitversion/execute@0
            displayName: 'GitVersion Execute'

          - bash: echo $Action$BuildVersion
            displayName: 'Set Build Version'
            env:
              Action: '##vso[build.updatebuildnumber]'
              BuildVersion: $(GitVersion.SemVer)

          - task: UseDotNet@2
            displayName: 'Install .NET 6.x SDK'
            inputs:
              packageType: sdk
              version: 6.x

          - task: DotNetCoreCLI@2
            displayName: 'Dotnet Restore'
            inputs:
              command: 'restore'
              projects: '$(solution)'
              restoreArguments: '--locked-mode'
              arguments: '--verbosity minimal'

          - task: DotNetCoreCLI@2
            displayName: 'Dotnet build $(buildConfiguration)'
            inputs:
              command: 'build'
              projects: '$(solution)'
              arguments: '-p:Version=$(GitVersion.SemVer) --configuration $(buildConfiguration) --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Dotnet Publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(projectPath)'
              arguments: '-c $(buildConfiguration) -p:Version=$(GitVersion.SemVer) -o $(Build.ArtifactStagingDirectory)/$(buildConfiguration) --no-build'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: 'YAML_Release'
    displayName: 'YAML_Release'
    dependsOn: Build_Test
    condition: succeeded('Build_Test')
    jobs:
      - deployment: YAML_Release
        displayName: 'YAML_Release'
        variables:
          - group: Movies_Appsettings
          - group: devtest.team_wildcard_certificate
          - group: IIS_YAML_Release_Settings
        environment:
          name: yaml
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: IISWebAppManagementOnMachineGroup@0
                  displayName: 'Manage IIS WebSite'
                  inputs:
                    EnableIIS: true
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'CreateOrUpdateWebsite'
                    WebsiteName: '$(IISSiteName)'
                    WebsitePhysicalPath: '$(IISPhysicalPath)'
                    AddBinding: true
                    Bindings: |
                      {
                          bindings: [
                            {
                              "protocol":"http",
                              "ipAddress":"*",
                              "hostname":"$(IISSiteHostName)",
                              "port":"80",
                              "sslThumbprint":"",
                              "sniFlag":true
                            },
                            {
                              "protocol":"https",
                              "ipAddress":"*",
                              "hostname":"$(IISSiteHostName)",
                              "port":"443",
                              "sslThumbprint":"$(certificate_thumbprint)",
                              "sniFlag":true
                            }
                          ]
                      }
                    CreateOrUpdateAppPoolForWebsite: true
                    ConfigureAuthenticationForWebsite: true
                    AppPoolNameForWebsite: '$(IISSiteName)'
                    DotNetVersionForWebsite: 'No Managed Code'
                    PipeLineModeForWebsite: 'Integrated'
                    AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
                    AnonymousAuthenticationForWebsite: true
                    BasicAuthenticationForWebsite: false
                    WindowsAuthenticationForWebsite: false

                - task: IISWebAppDeploymentOnMachineGroup@0
                  displayName: 'Deploy IIS Website'
                  inputs:
                    WebSiteName: '$(IISSiteName)'
                    TakeAppOfflineFlag: true
                    Package: '$(Pipeline.Workspace)/drop/Release/*.zip'
                    JSONFiles: '**/appsettings.json'
                    
  - stage: 'YAML_Release_VirtualApplication'
    displayName: 'YAML_Release_VirtualApplication'
    dependsOn: YAML_Release
    condition: succeeded('YAML_Release')
    jobs:
      - deployment: YAML_Release_VirtualApplication
        displayName: 'YAML_Release_VirtualApplication'
        variables:
          - group: Movies_Appsettings
          - group: devtest.team_wildcard_certificate
          - group: IIS_YAML_Release_VirtualApplication_Settings
        environment:
          name: yaml
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                  
                - task: IISWebAppManagementOnMachineGroup@0
                  displayName: 'Manage IIS WebSite'
                  inputs:
                    IISDeploymentType: IISWebApplication
                    WebsiteName: '$(IISSiteName)'
                    WebsitePhysicalPath: '$(IISPhysicalPath)'
                    CreateOrUpdateAppPoolForWebsite: true
                    AppPoolNameForWebsite: '$(IISSiteName)'
                    DotNetVersionForWebsite: 'No Managed Code'
                    ParentWebsiteNameForApplication: '$(IISSiteName)'
                    VirtualPathForApplication: '/$(VirtualApplicationName)'
                    PhysicalPathForApplication: '$(IISPhysicalPath)'
                    CreateOrUpdateAppPoolForApplication: true
                    AppPoolNameForApplication: '$(VirtualApplicationPool)'
                    DotNetVersionForApplication: 'No Managed Code'

                - task: IISWebAppDeploymentOnMachineGroup@0
                  displayName: 'Deploy IIS Website'
                  inputs:
                    WebSiteName: '$(IISSiteName)'
                    VirtualApplication: '$(VirtualApplicationName)'
                    Package: '$(Pipeline.Workspace)/drop/Release/*.zip'
                    TakeAppOfflineFlag: true
                    JSONFiles: '**/appsettings.json'
                    
# TO TEST SNI WITH DIFFERENT DOMAINS

  - stage: 'YAML_Release_Test_SNI'
    displayName: 'YAML_Release_Test_SNI'
    dependsOn: Build_Test
    condition: succeeded('Build_Test')
    jobs:
      - deployment: YAML_Release_Test_SNI
        displayName: 'YAML_Release_Test_SNI'
        variables:
          - group: Movies_Appsettings
          - group: razumovsky.me_wildcard_certificate
          - group: IIS_YAML_Release_Settings
        environment:
          name: testsni
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: IISWebAppManagementOnMachineGroup@0
                  displayName: 'Manage IIS WebSite'
                  inputs:
                    EnableIIS: true
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'CreateOrUpdateWebsite'
                    WebsiteName: '$(IISSiteName)'
                    WebsitePhysicalPath: '$(IISPhysicalPath)'
                    AddBinding: true
                    Bindings: |
                      {
                          bindings: [
                            {
                              "protocol":"http",
                              "ipAddress":"*",
                              "hostname":"$(IISSiteHostName)",
                              "port":"80",
                              "sslThumbprint":"",
                              "sniFlag":true
                            },
                            {
                              "protocol":"https",
                              "ipAddress":"*",
                              "hostname":"$(IISSiteHostName)",
                              "port":"443",
                              "sslThumbprint":"$(certificate_thumbprint)",
                              "sniFlag":true
                            }
                          ]
                      }
                    CreateOrUpdateAppPoolForWebsite: true
                    ConfigureAuthenticationForWebsite: true
                    AppPoolNameForWebsite: '$(IISSiteName)'
                    DotNetVersionForWebsite: 'No Managed Code'
                    PipeLineModeForWebsite: 'Integrated'
                    AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
                    AnonymousAuthenticationForWebsite: true
                    BasicAuthenticationForWebsite: false
                    WindowsAuthenticationForWebsite: false

                - task: IISWebAppDeploymentOnMachineGroup@0
                  displayName: 'Deploy IIS Website'
                  inputs:
                    WebSiteName: '$(IISSiteName)'
                    TakeAppOfflineFlag: true
                    Package: '$(Pipeline.Workspace)/drop/Release/*.zip'
                    JSONFiles: '**/appsettings.json'